// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  nickname       String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  sessions       Session[]
  rounds         Round[]
  scores         Score[]
  memberships    Membership[]
  participants   Participant[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Round {
  id           String        @id @default(cuid())
  date         DateTime
  courseName   String
  location     String?
  description  String?
  imageUrl     String?
  totalHoles   Int           @default(18)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  scores       Score[]
  participants Participant[]
}

model Score {
  id          String   @id @default(cuid())
  holeNumber  Int
  score       Int
  par         Int      @default(4)
  fairwayHit  Boolean  @default(false)
  greenHit    Boolean  @default(false)
  putts       Int      @default(2)
  userId      String
  roundId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  round       Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)

  @@unique([userId, roundId, holeNumber])
}

model Participant {
  id        String   @id @default(cuid())
  userId    String
  roundId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  round     Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)

  @@unique([userId, roundId])
}

model Group {
  id          String       @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  memberships Membership[]
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  role      String   @default("MEMBER") // ADMIN, MEMBER
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}
